% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 27-Apr-2022 14:45:20
%
% This script assumes these variables are defined:
%
%   input - input data.
%   output - target data.

% Load and prepare input data
i = 1;
for index = 1:1:10
    load(['ResultsHPC=' num2str(index)]);
    input(1, i:1:i+12) = hrms;
    input(2, i) = W1(1);
    input(2, i + 1) = W1(2);
    input(2, i + 2) = W1(3);
    input(2, i + 3) = W1(4);
    input(2, i + 4) = W1(5);
    input(2, i + 5) = W1(6);
    input(2, i + 6) = W1(7);
    input(2, i + 7) = W1(8);
    input(2, i + 8) = W1(9);
    input(2, i + 9) = W1(10);
    input(2, i + 10) = W1(11);
    input(2, i + 11) = W1(12);
    input(2, i + 12) = W1(13);
    i = i + 13;
end
save('Input_W', 'input', '-v7.3');

% Load and prepare output data
i = 1;
for index = 1:1:10
    load(['ResultsHPC=' num2str(index)]);
    output(1, i) = preD(1);
    output(1, i + 1) = preD(2);
    output(1, i + 2) = preD(3);
    output(1, i + 3) = preD(4);
    output(1, i + 4) = preD(5);
    output(1, i + 5) = preD(6);
    output(1, i + 6) = preD(7);
    output(1, i + 7) = preD(8);
    output(1, i + 8) = preD(9);
    output(1, i + 9) = preD(10);
    output(1, i + 10) = preD(11);
    output(1, i + 11) = preD(12);
    output(1, i + 12) = preD(13);
    output(2, i) = sepD(1);
    output(2, i + 1) = sepD(2);
    output(2, i + 2) = sepD(3);
    output(2, i + 3) = sepD(4);
    output(2, i + 4) = sepD(5);
    output(2, i + 5) = sepD(6);
    output(2, i + 6) = sepD(7);
    output(2, i + 7) = sepD(8);
    output(2, i + 8) = sepD(9);
    output(2, i + 9) = sepD(10);
    output(2, i + 10) = sepD(11);
    output(2, i + 11) = sepD(12);
    output(2, i + 12) = sepD(13);
    output(3, i) = Contact_ratio(1);
    output(3, i + 1) = Contact_ratio(2);
    output(3, i + 2) = Contact_ratio(3);
    output(3, i + 3) = Contact_ratio(4);
    output(3, i + 4) = Contact_ratio(5);
    output(3, i + 5) = Contact_ratio(6);
    output(3, i + 6) = Contact_ratio(7);
    output(3, i + 7) = Contact_ratio(8);
    output(3, i + 8) = Contact_ratio(9);
    output(3, i + 9) = Contact_ratio(10);
    output(3, i + 10) = Contact_ratio(11);
    output(3, i + 11) = Contact_ratio(12);
    output(3, i + 12) = Contact_ratio(13);
    i = i + 13;
end
save('Output_W', 'output', '-v7.3');

x = input;
t = output;

% Define the network
hiddenLayerSize = 10;  % You can adjust this based on your requirement
net = fitnet(hiddenLayerSize);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net, tr] = train(net, x, t);

% Save the trained network
save('Trained_Net', 'net');

% Define the specific input value (adjust as needed)
% specific_input_value = [hrms; W1(1:13)];

% Load the trained network
load('Trained_Net.mat', 'net');

% Define the UI elements
f = figure('Position', [100, 100, 400, 300]);

uicontrol('Style', 'text', 'Position', [50, 240, 100, 20], 'String', 'Roughness (hrms):');
hrms_input = uicontrol('Style', 'edit', 'Position', [150, 240, 200, 20]);

uicontrol('Style', 'text', 'Position', [50, 200, 100, 20], 'String', 'Young''s Modulus (E*):');
E_input = uicontrol('Style', 'edit', 'Position', [150, 200, 200, 20]);

uicontrol('Style', 'text', 'Position', [50, 160, 100, 20], 'String', 'Poisson''s Ratio:');
nu_input = uicontrol('Style', 'edit', 'Position', [150, 160, 200, 20]);

uicontrol('Style', 'pushbutton', 'Position', [150, 120, 100, 30], 'String', 'Predict', 'Callback', {@predict_callback, hrms_input, E_input, nu_input});

% Define a function to get W1 values
W1 = getW1();  % Function call to get W1 values

% Callback function for the 'Predict' button
function predict_callback(~, ~, hrms_input, E_input, nu_input, W1)
    hrms_value = str2double(get(hrms_input, 'String'));
    E_value = str2double(get(E_input, 'String'));
    nu_value = str2double(get(nu_input, 'String'));
    
    % Example input vector based on provided values
    specific_input_value = [hrms_value; E_value; nu_value; W1(4:end)'];  % Adjusted indexing
    
    % Make predictions and plot results
    plot_predictions(net, specific_input_value);
end

% Function to get W1 values
function W1 = getW1()
    % Load or define W1 here
    % For example:
    load('ResultsHPC=1.mat', 'W1');  % Load W1 from file
end
